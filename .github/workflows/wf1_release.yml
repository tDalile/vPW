##
# This workflow builds and tests docker images and pushes analyzer and pipeline to AWS ECR.
# A release also leads to a new analyzer and pipeline chart version. Therefore the version of charts are increased and pushed to the repo to trigger the charts workflows.
# The maven dependency report is also created and pushed to gh-pages.
##

name: Build release and push to AWS ECR

# Triggered by a published release (pre-release).
on:
  release:
    types: [prereleased, released]

jobs:

  build_and_push:
    name: Build and push to AWS ECR
    runs-on: ubuntu-latest

    steps:
      - name: Checkout viadee/vPW repository
        uses: actions/checkout@v2
        with:
          repository: viadee/vPW
          token: ${{ secrets.PAT_VIADEE_GITHUB_VPW }}

      # BUILD:

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Set up JDK 1.11
        uses: actions/setup-java@v2.1.0
        with:
          distribution: 'adopt' # See 'Supported distributions' for available options
          java-version: '11'

      - name: Cache local Maven repository
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Execute build for pipeline, analyzer & vpw-shared-elasticsearch-config
        # The *install* command executes each default lifecycle phase in order: validate -> compile -> test -> package -> verify, before executing install.
        run: |
          pwd
          mvn clean install
          mvn site:site

      - name: Login to public ECR
        uses: docker/login-action@v1
        with:
          registry: public.ecr.aws
          username: ${{ secrets.AWS_PROD_ECR_VIADEE_ACCESS_KEY_ID }}
          password: ${{ secrets.AWS_PROD_ECR_VIADEE_SECRET_ACCESS_KEY }}
        env:
          AWS_REGION: us-east-1

      # AWS PUSH:

      # Analyzer
      - name: Docker meta
        id: meta_analyzer
        uses: docker/metadata-action@v3
        with:
          images: public.ecr.aws/viadee/vpw-analyzer
          tags: |
            type=semver,pattern={{version}}
          flavor: latest=true

      - name: Build and push Docker image analyzer
        uses: docker/build-push-action@v2.6.1
        with:
          context: ./analyzer
          file: ./analyzer/Dockerfile
          platforms: linux/amd64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta_analyzer.outputs.tags }}
          labels: ${{ steps.meta_analyzer.outputs.labels }}

      # Pipeline
      - name: Docker meta
        id: meta_pipeline
        uses: docker/metadata-action@v3
        with:
          images: public.ecr.aws/viadee/vpw-pipeline
          tags: |
            type=semver,pattern={{version}}
          flavor: latest=true

      - name: Build and push Docker image pipeline
        uses: docker/build-push-action@v2.6.1
        with:
          context: ./pipeline
          file: ./pipeline/Dockerfile
          platforms: linux/amd64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta_pipeline.outputs.tags }}
          labels: ${{ steps.meta_pipeline.outputs.labels }}

      # CHARTS

      # Extract version
      - name: Extract docker image version of analzyer and pipeline and save as github_env
        run: |
          echo "ANALYZER_DOCKER_VERSION=$(echo '${{ steps.meta_analyzer.outputs.json }}' | jq -r '.labels."org.opencontainers.image.version"')" >> $GITHUB_ENV
          echo "PIPELINE_DOCKER_VERSION=$(echo '${{ steps.meta_pipeline.outputs.json }}' | jq -r '.labels."org.opencontainers.image.version"')" >> $GITHUB_ENV

      # Extract chart version of analyzer
      - name: Extract vpw-analyzer-chart and vpw-pipeline-chart version and save as github_env
        id: yq-0
        uses: mikefarah/yq@master
        with:
          cmd: |
            echo "VPW_ANALYZER_CHART_VERSION=$(yq eval ".version" ./deployment/helm/vpw-analyzer-chart/Chart.yaml)" >> $GITHUB_ENV
            echo "VPW_PIPELINE_CHART_VERSION=$(yq eval ".version" ./deployment/helm/vpw-pipeline-chart/Chart.yaml)" >> $GITHUB_ENV

      # This steps splits the version into an array: version=1.2.33 -> a=[1,2,33]
      # The last cell of the version a[2] will be increased by one.
      # You can change the behavior by changing the indices to increase version as a major a[0]++ or minor a[1]++
      - name: Increase vpw-analyzer-chart version
        run: |
          version=$VPW_ANALYZER_CHART_VERSION
          echo $version
          a=(${version//./ })
          a[2]=$((a[2]+1))
          version="${a[0]}.${a[1]}.${a[2]}"
          echo "VPW_ANALYZER_CHART_VERSION=$version" >> $GITHUB_ENV

      # This steps splits the version into an array: version=1.2.33 -> a=[1,2,33]
      # The last cell of the version a[2] will be increased by one.
      # You can change the behavior by changing the indices to increase version as a major a[0]++ or minor a[1]++
      - name: Increase vpw-pipeline-chart version
        run: |
          version=$VPW_PIPELINE_CHART_VERSION
          echo $version
          a=(${version//./ })
          a[2]=$((a[2]+1))
          version="${a[0]}.${a[1]}.${a[2]}"
          echo "VPW_PIPELINE_CHART_VERSION=$version" >> $GITHUB_ENV

      - name: Set Docker version of analyzer and increased vpw-analzyer-chart version in Chart.yaml
        id: yq-1
        uses: mikefarah/yq@master
        with:
          cmd: |
            VERSION=$ANALYZER_DOCKER_VERSION     yq eval -i ".appVersion=strenv(VERSION)" ./deployment/helm/vpw-analyzer-chart/Chart.yaml
            VERSION=$VPW_ANALYZER_CHART_VERSION  yq eval -i ".version=strenv(VERSION)"    ./deployment/helm/vpw-analyzer-chart/Chart.yaml

      - name: Check Chart.yaml of analyzer - debug
        run: |
          cat ./deployment/helm/vpw-analyzer-chart/Chart.yaml

      - name: Push new analyzer chart version to vpw repo
        run : |
          git config --global user.name 'wf1_release'
          git config --global user.email 'no-reply-github-actions@viadee.de'
          git fetch origin
          git branch -v -a
          git checkout main
          git pull
          git status
          git add ./deployment/**
          git commit -m"update vpw-analyzer-chart version to ${{env.VPW_ANALYZER_CHART_VERSION}} with new appVersion ${{env.ANALYZER_DOCKER_VERSION}}"
          git log
          git push https://$TOKEN_NAME:$TOKEN@github.com/viadee/vPW.git
        env:
          TOKEN: ${{ secrets.PAT_VIADEE_GITHUB_VPW }}
          TOKEN_NAME: PAT_VIADEE_GITHUB_VPW

      - name: Extract umbrella vpw-chart version and save as github_env
        id: yq-2
        uses: mikefarah/yq@master
        with:
          cmd: |
            echo "VPW_CHART_VERSION=$(yq eval ".version" ./deployment/helm-umbrella/vpw-chart/Chart.yaml)" >> $GITHUB_ENV

      #  https://api.github.com/search/issues?q=is:pr+is:open+repo:viadee/charts+head:vpw-chart-$VPW_CHART_VERSION+vpw-chart-$VPW_CHART_VERSION+in:title
      #  GitHub Api -> search request ON issues WITH query = is open pull request for repo viadee/charts with target branch and title "vpw-chart-$VPW_CHART_VERSION"
      - name: Request list of open pull requests for vpw-chart and save as json file
        run: |
          curl -X GET https://api.github.com/search/issues?q=is:pr+is:open+repo:viadee/charts+head:vpw-chart-$VPW_CHART_VERSION+vpw-chart-$VPW_CHART_VERSION+in:title > res_pr_list.json

      - name: Extract total_count [of pull requests saved as json file in previous step] as GitHubEnv to know if pull request for vpw-chart already exists
        run: |
          echo "PR_TOTAL_COUNT=$(jq '.total_count' ./res_pr_list.json)" >> $GITHUB_ENV

      # This steps splits the version into an array: version=1.2.33 -> a=[1,2,33]
      # The last cell of the version a[2] will be increased by one.
      # You can change the behavior by changing the indices to increase version as a major a[0]++ or minor a[1]++
      - name: Increase umbrella vpw-chart version and override github_env with increased version [if total_count==0, so vpw-chart PR does not exist]
        if: ${{ 0 == env.PR_TOTAL_COUNT  }}
        run: |
          version=$VPW_CHART_VERSION
          echo $version
          a=(${version//./ })
          a[2]=$((a[2]+1))
          version="${a[0]}.${a[1]}.${a[2]}"
          echo "VPW_CHART_VERSION=$version" >> $GITHUB_ENV

      - name: Wait until pull request for new vpw-chart version is found
        run: |
          json_result=$(curl -X GET https://api.github.com/search/issues?q=is:pr+is:open+repo:viadee/charts+head:vpw-chart-$VPW_CHART_VERSION+vpw-chart-$VPW_CHART_VERSION+in:title)
          echo $json_result | jq '.total_count'
          pr_count=$(echo $json_result | jq '.total_count')
          counter=1
          until [ $pr_count -eq 1 ] || [ $counter -eq 30 ]
          do
            echo $counter
            echo "Waiting 30 seconds..."
            sleep 30
            json_result=$(curl -X GET https://api.github.com/search/issues?q=is:pr+is:open+repo:viadee/charts+head:vpw-chart-$VPW_CHART_VERSION+vpw-chart-$VPW_CHART_VERSION+in:title)
            pr_count=$(echo $json_result | jq '.total_count')
            counter=$((counter+1))
          done

      - name: Set Docker version of pipeline and increased vpw-pipeline-chart version in Chart.yaml
        id: yq-3
        uses: mikefarah/yq@master
        with:
          cmd: |
            VERSION=$PIPELINE_DOCKER_VERSION     yq eval -i ".appVersion=strenv(VERSION)" ./deployment/helm/vpw-pipeline-chart/Chart.yaml
            VERSION=$VPW_PIPELINE_CHART_VERSION  yq eval -i ".version=strenv(VERSION)"    ./deployment/helm/vpw-pipeline-chart/Chart.yaml

      - name: Check Chart.yaml of pipeline - debug
        run: |
          cat ./deployment/helm/vpw-pipeline-chart/Chart.yaml

      - name: Push new pipeline chart version to vpw repo
        run: |
          git config --global user.name 'wf1_release'
          git config --global user.email 'no-reply-github-actions@viadee.de'
          git fetch origin
          git branch -v -a
          git checkout main
          git pull
          git status
          git add ./deployment/**
          git commit -m"update vpw-pipeline-chart version to ${{env.VPW_PIPELINE_CHART_VERSION}} with new appVersion ${{env.PIPELINE_DOCKER_VERSION}}"
          git log
          git push https://$TOKEN_NAME:$TOKEN@github.com/viadee/vPW.git
        env:
          TOKEN: ${{ secrets.PAT_VIADEE_GITHUB_VPW }}
          TOKEN_NAME: PAT_VIADEE_GITHUB_VPW


      # UPDATE LICENSE REPORT

      - name: Copy reports to ./sites outside repo directory
        run: |
          mkdir sites
          cp -rv ./vPW/vPW/analyzer/target/site ./sites/site-analyzer
          cp -rv ./vPW/vPW/pipeline/target/site ./sites/site-pipeline
          cp -rv ./vPW/vPW/vpw-shared-elasticsearch-config/target/site ./sites/site-vpw-shared-elasticsearch-config
        working-directory: ../../

      - name: Switch to branch main
        run: |
          git fetch origin
          git branch -v -a
          git checkout main
          git status

      - name: Copy (overrite) sites into local branch main
        run: |
          cp -rv ./sites/site-analyzer ./vPW/vPW/docs/MavenSite
          cp -rv ./sites/site-pipeline ./vPW/vPW/docs/MavenSite
          cp -rv ./sites/site-vpw-shared-elasticsearch-config ./vPW/vPW/docs/MavenSite
        working-directory: ../../

      - name: Commit and push to remote
        run: |
          git config --global user.name 'wf1_release'
          git config --global user.email 'no-reply-github-actions@viadee.de'
          git add docs/MavenSite
          git commit -m"update maven dependency report"
          git push
